<?php
/*
This script is called by the m2m-server. It shall be placed in a folder that does not require authentication.
The m2m-server calls this page giving its ID, message index number and the nmea data sentences in GET paramteres.
A status respone is given to the m2m-server. The response might also contain a COMMAND to execute.

EXAMPLE ;
http://www.mickels.fi/m2m/m2m.php?uid=12345&idx=32&nmea=$ARANA,3,1,2,3,4,5,6*ff|$ARDIO,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14*ff

A call to this page shall include some GET-parameters;

uid 
  * Uid is set in the serial2http-script.
  * This is the id of this installation. 
  * Uid is used to create the subfolder for installation.
  * Only characters allowed for files shall be used.
  * If uid is missing, following response is given: m2mNOUID - <servername>
  
idx 
	* Idx is the index counter of the messages. 
	* Idx is generated by http2serial-script.
	* Some database-functions rely on idx to do scheduled tasks fex. each minute. //XXXX
    * If idx is missing, following response is given: m2mNOIDX - <servername>
	
	If both uid and idx are set;
	 * The uid subfolder is created if not already present
	 * The database is opened (or created if not already present)
	 * The client IP and current timestamp are put in file ip.txt in uid-folder.
	 * The call is then checked for nmea-data

nmea
    * One or several NMEA-type sentences, separated by pipe character | if more than one
	* Regardless of the actual data in the nmea variable, response m2mOK - <servername> is given as long as there is at least ONE character of data.
    * If nmea is totally missing, following response is given: m2mNODATA - <servername>
	
	If all data is present in the call;
	* NMEA-data is checked for reqognized sentences.
    * Response m2mOK - <servername> will be given, with possible additional data commands. 

Checking of NMEA-data;



*/
include 'nmea.php';

//how many hours of data to keep in ARANA-table after compressing to hourly averages 
$saveHours = 12;

$uri = $_SERVER['SERVER_NAME'];//.$_SERVER['REQUEST_URI'];

//server time is used for data
$ts = time();

//uid is specific for one installation
$uid = $_GET['uid'];

//uid is mandatory
if (!isset($_GET['uid']))
{
 echo "m2mNOUID - $uri";
 exit();
}

//sequential index number to detect timed out messages 
$idx = $_GET['idx'];

if ($idx > 0 && ($idx % 10) == 0 )
{
	//call cron every 10 secs
	file_get_contents('cron.php');
}

//idx is mandatory
if (!isset($_GET['idx']))
{
 echo "m2mNOIDX - $uri";
 exit();
}


//****************** uid and idx are both set *********************

//create user folder if not exists
if (!file_exists($uid))
{
    mkdir($uid);
}

//log IP of client
$file = "$uid/ip.txt";
$ip = "$ts;".$_SERVER["REMOTE_ADDR"];
file_put_contents($file, $ip);

//open or create database in userfolder
$db = new PDO("sqlite:$uid/m2m.db3"); 


//read data content
$nmea = $_GET['nmea'];

//array of nmea-sentences split by pipe, or only one sentence
$sentences = explode('|', $nmea);

//even if no data, an empty array will be returned
if ($sentences[0] == null)
{
	  echo "m2mNODATA - $uri";
}
else
{
	//***** Some kind of NMEA data was found, but could be only one character.
	foreach($sentences as $sentence)
	{
		$nmea = new NMEA();
		$nmea->setSentence($sentence);
		$header = $nmea->getHeader();
		
		//FIX::check validity of sentence here and continue if not valid
		
		switch ($header) 
		{
			//Analog data sentence has 6 datafields
			case '$ARANA':
				include 'arana.php';
			break;
			
			//Digital data sentence
			case '$ARDIO':
			    include 'ardio.php';
			    //Reading to be implemented as ARANA, with support for future MUX 
			break;
			
			//Status sentence displays controller data
			case '$ARSTA':
				include 'arsta.php';
			break;
			
			//Control sentence sets controller data
			case '$ARSET':
				include 'arsta.php';
			break;
			
		}
	}
	  if (isset($command)) $command = "COMMAND:$command";
	  echo "m2mOK - $uri $command";
}

?>